// DigiTurnos - Configuration and Constants

const DIGITURNOS_CONFIG = {
    // Application settings
    APP_NAME: 'DigiTurnos',
    CLINIC_NAME: 'Clínica Torcoroma',
    VERSION: '1.0.0',
    
    // Text-to-Speech settings
    TTS: {
        LANGUAGE: 'es-ES',
        RATE: 0.8,
        VOLUME: 1.0,
        ENABLED: true
    },
    
    // Display settings
    DISPLAY: {
        UPDATE_INTERVAL: 1000, // milliseconds
        MAX_LAST_CALLED: 5,
        AUTO_REFRESH_VIEWS: true
    },
    
    // Queue settings
    QUEUE: {
        MAX_TICKETS_PER_SERVICE: 999,
        TICKET_PREFIX_LENGTH: 3,
        AUTO_ADVANCE_QUEUE: false
    },
    
    // Print settings
    PRINT: {
        AUTO_PRINT: true,
        PRINT_DELAY: 500, // milliseconds
        INCLUDE_WAITING_COUNT: true
    },
    
    // Services configuration
    SERVICES: [
        {
            id: 'general',
            name: 'Medicina General',
            color: 'bg-blue-500',
            textColor: 'text-blue-500',
            borderColor: 'border-blue-500',
            prefix: 'G',
            priority: 1,
            estimatedTime: 15 // minutes
        },
        {
            id: 'lab',
            name: 'Laboratorio',
            color: 'bg-green-500',
            textColor: 'text-green-500',
            borderColor: 'border-green-500',
            prefix: 'L',
            priority: 2,
            estimatedTime: 10
        },
        {
            id: 'specialist',
            name: 'Especialista',
            color: 'bg-purple-500',
            textColor: 'text-purple-500',
            borderColor: 'border-purple-500',
            prefix: 'E',
            priority: 3,
            estimatedTime: 30
        },
        {
            id: 'emergency',
            name: 'Urgencias',
            color: 'bg-red-500',
            textColor: 'text-red-500',
            borderColor: 'border-red-500',
            prefix: 'U',
            priority: 0, // Highest priority
            estimatedTime: 20
        }
    ],
    
    // Ventanillas (Service windows) configuration
    VENTANILLAS: [
        {
            id: 'ventanilla1',
            name: 'Ventanilla 1',
            color: 'bg-blue-600',
            textColor: 'text-blue-600',
            allowedServices: ['general', 'lab'], // Services this window can handle
            active: true
        },
        {
            id: 'ventanilla2',
            name: 'Ventanilla 2',
            color: 'bg-green-600',
            textColor: 'text-green-600',
            allowedServices: ['specialist', 'emergency'],
            active: true
        }
    ],
    
    // Messages and text
    MESSAGES: {
        WELCOME: 'Bienvenido al sistema de turnos digital',
        SELECT_SERVICE: 'Selecciona tu servicio:',
        TAKE_TICKET: 'Tomar Turno',
        YOUR_TICKET: 'Tu turno:',
        PRINT_TICKET: 'Imprimir Ticket',
        CALL_NEXT: 'Llamar Siguiente',
        REPEAT_CALL: 'Repetir Llamado',
        COMPLETE_SERVICE: 'Completar Atención',
        NO_TICKETS_WAITING: 'Sin turnos en espera',
        TICKET_GENERATED: 'Turno generado exitosamente',
        PLEASE_WAIT: 'Por favor espere su turno',
        GO_TO_WINDOW: 'favor dirigirse a',
        THANK_YOU: 'Gracias por su paciencia'
    },
    
    // API endpoints (for future integration)
    API: {
        BASE_URL: '/api/v1',
        ENDPOINTS: {
            TICKETS: '/tickets',
            QUEUE: '/queue',
            SERVICES: '/services',
            VENTANILLAS: '/ventanillas',
            STATISTICS: '/statistics'
        }
    },
    
    // Storage keys for localStorage (if needed)
    STORAGE_KEYS: {
        QUEUE: 'digiturnos_queue',
        CURRENT_CALLS: 'digiturnos_current_calls',
        LAST_CALLED: 'digiturnos_last_called',
        SETTINGS: 'digiturnos_settings'
    },
    
    // Animation durations (in milliseconds)
    ANIMATIONS: {
        FADE_IN: 500,
        SLIDE_IN: 300,
        PULSE: 2000,
        NOTIFICATION: 3000
    },
    
    // Color schemes
    COLORS: {
        PRIMARY: '#3b82f6',
        SUCCESS: '#10b981',
        WARNING: '#f59e0b',
        ERROR: '#ef4444',
        INFO: '#6366f1',
        GRAY: {
            50: '#f9fafb',
            100: '#f3f4f6',
            200: '#e5e7eb',
            300: '#d1d5db',
            400: '#9ca3af',
            500: '#6b7280',
            600: '#4b5563',
            700: '#374151',
            800: '#1f2937',
            900: '#111827'
        }
    },
    
    // Responsive breakpoints
    BREAKPOINTS: {
        SM: '640px',
        MD: '768px',
        LG: '1024px',
        XL: '1280px'
    },
    
    // Development settings
    DEBUG: {
        ENABLED: false, // Set to true for debugging
        LOG_LEVEL: 'info', // 'debug', 'info', 'warn', 'error'
        MOCK_DATA: false
    }
};

// Utility functions for configuration
const CONFIG_UTILS = {
    // Get service by ID
    getService: (serviceId) => {
        return DIGITURNOS_CONFIG.SERVICES.find(s => s.id === serviceId);
    },
    
    // Get ventanilla by ID
    getVentanilla: (ventanillaId) => {
        return DIGITURNOS_CONFIG.VENTANILLAS.find(v => v.id === ventanillaId);
    },
    
    // Check if service is allowed in ventanilla
    isServiceAllowedInVentanilla: (serviceId, ventanillaId) => {
        const ventanilla = CONFIG_UTILS.getVentanilla(ventanillaId);
        return ventanilla ? ventanilla.allowedServices.includes(serviceId) : false;
    },
    
    // Get services sorted by priority
    getServicesByPriority: () => {
        return [...DIGITURNOS_CONFIG.SERVICES].sort((a, b) => a.priority - b.priority);
    },
    
    // Get active ventanillas
    getActiveVentanillas: () => {
        return DIGITURNOS_CONFIG.VENTANILLAS.filter(v => v.active);
    },
    
    // Format ticket number
    formatTicketNumber: (prefix, number) => {
        const paddedNumber = number.toString().padStart(DIGITURNOS_CONFIG.QUEUE.TICKET_PREFIX_LENGTH, '0');
        return `${prefix}${paddedNumber}`;
    },
    
    // Debug log function
    log: (level, message, data = null) => {
        if (!DIGITURNOS_CONFIG.DEBUG.ENABLED) return;
        
        const levels = ['debug', 'info', 'warn', 'error'];
        const configLevel = levels.indexOf(DIGITURNOS_CONFIG.DEBUG.LOG_LEVEL);
        const messageLevel = levels.indexOf(level);
        
        if (messageLevel >= configLevel) {
            const timestamp = new Date().toISOString();
            const prefix = `[${timestamp}] [${level.toUpperCase()}] DigiTurnos:`;
            
            if (data) {
                console[level](prefix, message, data);
            } else {
                console[level](prefix, message);
            }
        }
    }
};

// Export for use in other modules (if using modules)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { DIGITURNOS_CONFIG, CONFIG_UTILS };
}